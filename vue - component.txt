1. 부모 -> 자식
:K="V" 
 K => props로 받을 변수명  V => 넘길 값
부모
V의 값을 넘긴다.

자식  
 props : ["K"] K로 받는다. 
or props : {K : Object} 데이터 타입의 유형을 설정
or props : {K : {type : ~~~ , default : ~~~}} 타입과 데이터가 없을시 default를 정해줄 수도 있다.

2. 부모 <- 자식
이 경우 값의 변화
 1. 부모에게 받은 값을 자식이 직접 변경하면 error, 따라서 다른 변수에 값을 넣은 후 이 변수를 사용한다.
 2. $emit을 이용하여 값의 변화를 부모 자식간에 알린다. $emit('EventName',argument) 
 이후 받는 쪽에서 @EventName = function(argument) 발생시킬 함수 

이런 방식은 부모 - 자식과 같은 경우로 제한되어 EventBus를 이용한다.
------------------------------------------------------------------------------------------------------------
예) 부모 (게시판 리스트)  <----->    자식(page 영역)
부모
import Pager from '../../../common/Pager';
<pager v-if="boardList != null" @pageMove="changePage" :total-count="totalCount" :display-number="5"  :currentValue="page" ></pager>
method :{
    //게시물 페이지 전환
    changePage : function(pageNum){ 
        // 게시판명에 & 기호 포함될 경우 잘리는 오류 수정
        var boardName = `${this.pageText}`;
        boardName = boardName.replace("&", "%26");
        
        const url = `/brd/list?boardId=${this.boardId}&page=${pageNum}&boardName=` + boardName; 
        this.$router.push({path:url});
    },
    ...
}=> Value명에 해당하는 부모 method

자식
<template>
    <div class='pager-wrapper'>
        <b-button variant="primary" @click="firstPageGo"><i class="fas fa-backward"></i></b-button>
        <b-button variant="primary" @click="previousPageGo"><i class="fas fa-caret-left"></i></b-button>
        <div v-for="i in displayNumbers" :key="i" @click="pageClick(i)" class="pager-container">
            <div v-if="i==currentPage" class="pager pager-selected">{{i}}</div>
            <div v-else class="pager">{{i}}</div>
        </div>
        <b-button variant="primary" @click="nextPageGo"><i class="fas fa-caret-right"></i></b-button>
        <b-button variant="primary" @click="lastPageGo"><i class="fas fa-forward"></i></b-button>
    </div>
</template>
 props:{
         //현재 페이지 번호
         currentValue :{
             type : Number,
             default : 1,
         },
        // 문서 총 개수
        totalCount :{
            type : Number,
            default : 0,
        },
        // 보여질 네비게이션 숫자 ex) 3 > 3개씩 보여준다. // 5 > 5개씩 보여준다
        displayNumber : {
            type : Number,
            default : 3,
        },
        // 한페이지에 나타날 문서 개수
        displayDocNumber :{
            type : Number,
            default : 10,
        }

} => props 로 value를 받아준다.
data(){
    return{
        // 총 페이지에서 몇번째 번호들이 보여지는지 ex) displayNumber=3,  1 > [1,2,3] ,  2 > [4,5,6] 
        currentDisplayPage : 1,
        // 현재 페이지
        currentPage :1,
        
    }
},=> 사용할 변수명 정의
created (){
        this.currentPage = this.currentValue;
        this.currentDisplayPage =Math.ceil(this.currentPage/this.displayNumber);
} => 부모의값을 직접 변경하는것이 아닌 따로 변수에 대입하여 사용.
methods :{
    pageClick(i){
        this.currentPage = i;
        this.$emit("pageMove",this.currentPage);
    },
    nextPageGo(){
        if(this.currentPage >=+ this.lastPage ){return;}
            
        this.currentPage++;
        this.$emit("pageMove",this.currentPage);

        if(this.currentPage%this.displayNumber===1){
            if(this.currentDisplayPage<this.lastDisplayPage)
                ++this.currentDisplayPage;
        }
    },   
    ...
} => page에 대한 값의 변화가 있을때 pageMove이벤트를 발생시켜 부모의 method를 호출한다.
------------------------------------------------------------------------------------------------------------
Slot
부모 자식간 컴포넌트를 사용할 때 유동적인 엘리먼트를 만들 때 사용한다. 이를 이용해서 재사용성을 증가 시킬수 있다.

부모
<mail-subtitle :path="this.$store.state.value">
    <span slot="pageText"><a @click="event">{{pageText}}</a></span>
    <span slot="totalCnt">( {{totalCnt}} )</span>
</mail-subtitle>

자식
<template>
    <div class="subtitle-container">
        <div style="line-height:40px;">
            <slot name="pageText">
            </slot>
            <slot name="totalCnt">
            </slot>
        </div>
        <div>
            ...
        </div>
    </div>
</template>

부모는 자식 컴포넌트 mail-subtitle을 사용하며 부모에서 선언한 slot들이 자식의 slot에 각각 name에 매핑되어 사용되어진다.
------------------------------------------------------------------------------------------------------------
v-slot 이용한 데이터 넘기기
하위 컴포넌트 
<template>
  <div>  
    <slot name= "forFirst" :fromHeader="title"></slot>
    <p> first</p>      
    <slot name= "forSecond"></slot>
    <p> second </p>
    <slot></slot>
    <p> third </p>      
  <br>
  </div>
</template>
<script>
export default {
  data() {
    return {
      title : 'Vue.js study~'
    }
  },

상위 컴포넌트
<template>
  <div>
    <h1>About page</h1>
    <Header>      
      <template v-slot:forFirst="props">
        <p>Here is the first {{props.fromHeader}} </p>
      </template>
      <template #forSecond>
        <p>Here is the second</p>
      </template>
      <template >
        <p>Here is the third</p>
      </template>
    </Header>
  </div>
</template>
{{props.fromHeader}} 여기에는 Vue.js study~ 가 매칭된다.
------------------------------------------------------------------------------------------------------------
slot-scop를 이용한 데이터 넘기기
slot-scope는 부모 컴포넌트에서 자식 컴포넌트의 데이터를 가져와서 사용할 수 있게 해주는 Vue의 기능입니다. 이 기능은 스코프 슬롯을 이용해 부모 컴포넌트에서 자식의 데이터를 접근하고 사용할 수 있게 합니다.


자식
<template>
  <div>
    <header>
      <slot name="child" :childData="childData" :close="close">
        <button>버튼</button>
      </slot>
    </header>
    <div>
      <slot name="body">
        <p>기본 바디</p>
      </slot>
    </div>
  </div>
</template>

<script>
export default {
  name: "BaseModal",
  data() {
    return {
      childData: "child",
      active: false
    };
  },
  methods: {
    close() {
      this.active = false;
    }
  }
};
</script>
자식 컴포넌트 (BaseModal)
자식 컴포넌트에서는 슬롯에 데이터를 넘겨주는 역할을 합니다. childData와 close라는 메소드를 슬롯에 전달하고 있습니다.

위 코드에서 :childData="childData"와 :close="close"는 자식 컴포넌트에서 부모에게 넘길 데이터입니다. 이 슬롯을 통해 부모 컴포넌트에서 childData와 close를 사용할 수 있게 됩니다.


부모
<template>
  <div>
    <BaseModal>
      <!--자식에서 사용하던 name="child"로 감싸진 태그의 함수, 변수 모두 가져옵니다.-->
      <template slot="child" slot-scope="slotProps">
        <button @click="slotProps.close">닫기</button>
        <!-- { childData: 'child' } -->
        {{ slotProps }}
      </template>
      <p slot="body">바디입니다.</p>
    </BaseModal>
  </div>
</template> 

부모 컴포넌트는 자식 컴포넌트에서 제공하는 데이터를 slot-scope를 이용해 받아옵니다. slotProps라는 이름으로 데이터가 전달되며, 여기에는 자식 컴포넌트에서 전달한 childData와 close 메소드가 들어 있습니다.

여기서 slot-scope="slotProps"는 자식 컴포넌트에서 전달한 데이터를 slotProps라는 객체로 받아오는 역할을 합니다. 즉, slotProps는 childData와 close를 포함하고 있는 객체입니다.

slotProps.childData: 자식에서 전달한 데이터 "child"
slotProps.close: 자식에서 전달한 메소드 close()


------------------------------------------------------------------------------------------------------------
재귀 컴포넌트
템플릿에서 자기 자신을 호출하는 컴포넌트.
반드시 name 옵션을 지정해야한다.

Child
<template>
  <ul>
      <li v-for="s in subs" v-bind:class="s.type">
          {{name}}
          <tree :subs="s.subs"></tree>
      </li> 
 </ul>
</template>
 
<script>
export default {
   name: 'tree',
   props: ['subs']
} 
</script>

Parent
<template>
  <div>
     ... 
     <tree :subs="orgcharts"></tree>
  </div>
</template>
 
<script>
import Tree from './Tree.vue'
 
export default{
  name: 'aobut',
  components: { Tree },
  data(){ 
    return {
        orgcharts: [ { name: '서울', type: 'division', subs: [ { name: '서울 동작구팀', type: 'team'}, ..] } ... ]
    }
}
------------------------------------------------------------------------------------------------------------
fragment
vue 2.x는 template 아래에 루트 element가 반드시 하나 있어야한다. 
따라서 원치않는 태그를 포함시켜야 하는 경우가 생긴다.
이때 이 루트 element를 지운채로 컴포넌트를 사용해야 할 떄 사용한다.

1. 패키지 설치
 npm i -s vue-fragment  (-s 는 -save의 약자, dependencies에 해당 패키지 의존성이 추가된다.)

2.플러그인 또는 컴포넌트에 등록한다. (플러그인 등록이 좋아보임.)

2-1. 플러그인 등록
import Fragment from 'vue-fragment'
Vue.use(Fragment.Plugin)

// or

import { Plugin } from 'vue-fragment'
Vue.use(Plugin)

2-2 컴포넌트 등록
import { Fragment } from 'vue-fragment'

export const MyComponent {
  components: { Fragment },
  ...,
  data() { return { message: 'hello world }}
}

이후 사용하고자 하는 컴포넌트에 사용한다.
<template>
    <fragment>
       <a>.....</a>
    </fragment>
</template>
그럼 해당 컴포넌트를 사용하는 페이지에서는 a태그만 보이게 된다.
------------------------------------------------------------------------------------------------------------
