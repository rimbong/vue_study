------------------------------------------------------------------------------------------------------------
Arrow Functions
Vue Instance내에서 this는 Vue Instance를 가리키고 있습니다. 하지만 함수가 선언이 될때, 어떤 방식으로 함수를 선언해주느냐에 따라 
this의 값은 달라집니다.

기존 함수 선언 방법인 function()은 this가 새로 선언된 함수 내부를 가리키게 됩니다. 반면에 arrow function은 함수가 선언되든 말든 원래의 위치를 유지하게 만들어서 this 가 Vue Instance를 가리킵니다.

즉, Arrow Functions은 this 가 그대로 Vue Instance를 가리키고 있기 때문에 data내의 변수를 찾아서 기능이 실행된다.
주의) VueJS의 모든 함수를 arrow function으로 사용해야만 하는 것은 아닙니다. 뷰 인스턴스의 속성(methods,computed,...)들을 정의할 때는 arrow function을 사용하면 기능이 동작하지 않으니 주의해주세요.
------------------------------------------------------------------------------------------------------------
axios
1.import 하지 않고 전역으로 사용하기
main.js
import axios from 'axios'
Vue.prototype.$axios = axios

xxx.vue
this.$axios 로 접근하여 사용

2.커스텀 Axios
service/index.js
import axios from 'axios';

const get = (url) =>{  
    const config ={        
        "headers" : {
            "Accept": 'application/json', 
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }
    } 
    return axios.get(url,config)
		   .then(res=>{})
		   .catch(err=>{});
};

const post = (url,params)=>{
    const config ={    
    	"headers" : {	       
	        "Accept": 'application/json', 
	        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
		}
	}
    return axios.post(url,params,config)
    .then(res=>{})
    .catch(err=>{});
}

export default{get,post};

service/xxx.js
import customAxios from './index.js';
export default {

    insertXXX(path){
        return customAxios.get(`...`);
    },
}
------------------------------------------------------------------------------------------------------------
view 파일구조

App.vue -> 전역 event, router-view , 커스텀alert ,로딩대기창(spinner) [최대한 전역적인 느낌 , 간단하게]
<template>
  <div id="app" >    
    <router-view></router-view>    
    <spinner :loading="loadingStatus"></spinner>
    <alert></alert>
  </div>  
</template>

main.vue -> 로그인 이후 main 화면 , main-header,contents,footer가 필요없는 vue가 있을 수 있으므로 main을 따로 뺴놓아야 한다.
<template>
  <div>
    <main-header></main-header>
    <main-contents @onViewPage="onViewPage"></main-contents>
    <main-footer></main-footer>
  </div>
</template>
methods:{    
  onViewPage(path){     	
		...
		this.$router.push({path : path}); 
  }...
------------------------------------------------------------------------------------------------------------
전역 변수 또는 이벤트 

eventbus 또는 vuex 로 구현다.
eventbus => spinner , alert , modal 같은 기능은 eventbus로 구현하는게 좋아보임
vuex	 	 => 서버와의 데이터 통신은 vuex로 구현하는 것이 좋아보인다.

------------------------------------------------------------------------------------------------------------
main.js에 글로벌 변수 선언
Vue.prototype.$global = "value";

이후 vue 파일에서 사용시
this.$global

JS에서 사용시
import Vue from 'vue'; 선언후
Vue.prototype.$global;

------------------------------------------------------------------------------------------------------------
Vue.use
Vue.use(포함할JS)
use 선언시 포함할JS 내부의 install을 호출하게 되는데 여기에다 초기화할 전역변수들을 선언하는게 좋다.

------------------------------------------------------------------------------------------------------------
require
이미지 경로 등 경로를 포함하는 경우 require 써야 웹팩이 제대로 인식하여 동작하게 된다.
 data() {
        return {
            icons : {
                check : {
                    img : require('@/assets/img/common/ic_check.png')
                },
                fail : {
                    img : require('@/assets/img/common/ic_fail.png')
                },
                ok : {
                    img : require('@/assets/img/common/ic_ok.png')
                },
                alarm : {
                    img : require('@/assets/img/common/ic_alarm.png')
                },
            }
        }
    },