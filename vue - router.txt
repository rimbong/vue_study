객체
$router 
=> $router는 Router 인스턴스를 가리킨다. Router 인스턴스는 웹 애플리케이션 전체에서 딱 하나만 존재하는 것으로 전반적인 라우터 기능을 관리한다. 예를 들면 애플리케이션 전체에서 히스토리를 어떻게 관리할지에 대한 설정이나 router-link 요소 없이 프로그램적인 방법으로 페이지를 이동(this.$router.push())할 때 이 Router 인스턴스를 사용한다.
프로퍼티
app             라우터를 사용하는 루트 Vue 인스턴스
mode            라우터 모드
currentRoute    현재 라우트에 대한 Route 객체
push(location, onComplete?, onAbort?)       페이지 이동 실행. 히스토리에 새 엔트리를 추가하고 브라우저에서 뒤로 가기 버튼이 눌리면 앞의 URL로 돌아감.
replace(location, onComplete?, onAbort?)    페이지 이동 실행. 히스토리에 새 엔트리를 추가하지 않음.
go(n)               히스토리 단계에서 n 단계 이동. window.history.go(n)과 비슷함
back()              히스토리에서 한 단계 돌아감. history.back()과 같음
foward()            히스토리에서 한 단계 앞으로 나아감.
addRoute(routes)    라우터에서 동적으로 라우트를 추가

$route  
=> this.$route.params 등의 코드에 나오는 $route 는 Route 객체다. 페이지 이동 등으로 라우팅이 발생할 때마다 생성되며, 현재 활성화된 라우트의 상태를 저장한 객체이다. 즉, 현재의 경로 및 URL 파라미터 등의 정보를 이 객체에서 받을 수 있다. 컴포넌트 내부에 구현된 Router 훅 함수 등을 통해서 참조할 수 있고, watch에서 모니터링하기도 한다.
프로퍼티
path        현재 라우트의 경로를 나타내는 문자열.
params      정의된 URL 패턴과 일치하는 파라미터의 키-값 쌍을 담고 있는 객체. 파라미터가 없다면 빈 객체.(경로가 foo/user/1이면 router 설정에서 path 설정을 path: 'foo/:text/:value'와 같이 설정을 한후에 $route.params.text,$router.params.value 로 접근하여 사용한다.)
query       쿼리 문자열의 키-쌍 값을 담고 있는 객체. 쿼리가 없다면 빈 객체. (경로가 /foo?user=1 이면 $route.query.user == 1이 된다.
hash        현재 URL에 URL 해시가 있을 경우 라우트의 해시값을 갖는다. 해시가 없다면 빈 객체
fullPath    쿼리 및 해시를 포함하는 전체 URL
name        이름을 가진 라우트인 경우 라우트의 이름
------------------------------------------------------------------------------------------------------------
vue가 아닌 라우터를 등록하여 사용할 경우(.js)
export const main = [
    {
        // 메인화면 컴포넌트
        path: '/main', 
        name: 'main',
        component: Main
    }
]

프로퍼티 
path	   -> URL을 이용하여 접근방식
name	   -> 지정한 name에 접근방식
component  -> 이동 및 보여질 vue file 등록
component 에 vuefile 등록 방식
    1. 해당 라우터에 연결된 모든 import 파일을 가져오는 방식
     component : Home 
    2. 필요시에 동적import하여 가져오는 방식
     component : () => import (...........................)
------------------------------------------------------------------------------------------------------------
vue파일에서 라우터 사용방법
1. <~~~  @click="$router.push("{name : ~~~}")"> or .push("/~~~~") 
2. <router-link :to = "{name : ~~~}"></>
3. <~~~~ router-link :to = "">
------------------------------------------------------------------------------------------------------------
라우터 설정시 
mode
1.history
 일반적인 URL 주소가 나온다.
2.hash (default)
 /#/~~~ 과 같이 해시 태그가 나온다.
------------------------------------------------------------------------------------------------------------
argument 전달
1. path  "/url/:id" 이후 vue페이지에서 this.$route.params 로 접근
 주소 뒤에 params  값을 추가하여 보낸다.
2. router :to ="{params : {} , name : ''}"
3. 객체를 보내야 할때
this.$router.push({ name: "ComponentName" ,params : { p : 'a'} });
여기서 주의할 점은 path가 아닌 name으로 보내야 한다는 점이다.
이후 $route.params로 받는다.
4. 쿼리스트링 형태로 보낼때
this.$router.push({ path: "ComponentPath" ,query : { p : 'a'} });
여기서 주의할 점은 name이 아닌 path으로 보내야 한다는 점이다.
이후 $route.query로 받는다.
------------------------------------------------------------------------------------------------------------
queryString 
URL ? arg1 = ~~~&arg2 = ~~~ 이후 vue페이지에서 this.$route.query 로 접근
형태로 url을 보낸다.
------------------------------------------------------------------------------------------------------------
children 
하위 경로를 정해주는 것
해당 vue 파일 내부에 <router-view></> 태그를 넣어서 children router를 적용 시켜준다.
라우터 js
export const board = [
    {
        path:'/brd',
        name: "board",
        component : Board,
        children : [
            {
                
                path :'list',
                name : "boarList",
                component : BoardList,
                beforeEnter : (to,from,next) =>{}                            
            },
            {
                path :'view',
                name: "boardView",
                component : BoardView,
                beforeEnter : (to,from,next) =>{}
            }
    }
vue 형태는 아래와 같은 구조가 된다.
App.vue
<template>
  <div id="app" >    
      <router-view></router-view>    
  </div>
</template> => router-view 에 Board 컴포넌트가 들어가고

Board.vue
<template>
     <div>        
        <router-view></router-view>                    
    </div>    
</template> =>  router-view 에  children에 해당하는 BoardList,BoardView가 들어가게 된다.
------------------------------------------------------------------------------------------------------------
가드
beforeEnter
라우터가 불러들이기 전처리
to	    => 현재 이동하려는 정보가 담긴 객체 (this.$route 와 일치)
from	=> 어디에서? 정보가 담긴 객체
next()	=> 이동에 대한 결정 next() 해당 vue로 이동,  next('/') '/'에 대응하는 vue로 이동
vue에서 선언할 경우에는 beforeRouteEnter로 선언한다.
------------------------------------------------------------------------------------------------------------

예) $router를 이용해 push 또는 replace 처리
change.vue
this.$router.replace({path:"/board/list?type=all&page=1"});

boardList.vue
watch : {
    // 라우터 URL 변경시 해당 메소드 실행
    '$route': 'getBoardList'
} => 뷰에서 라우터 객체 접근 등은 $route 사용 !
getBoardList(){
    this.$store.dispatch('board/list',this.$route);
}, => vuex action 호출 ,$route 객체를 넘긴다.

vuex - board.js
actions: {
    list(context,router){
        const params = {};
        params.type = router.query.type;
        params.page = router.query.page;    
        Service.list(params)
        .then(res => {
            context.commit("setParams",params);        
            context.commit("lsit",res);        
        });
    }
}=> service 로직 수행후 mutation 수행
mutations: {
    list(state,res){
        state.list = res.data.list;
        state.totalCnt = res.data.total_size;
        state.unread = res.data.unread;
    },
    setParams(state,payload){
        state.page = payload.page;
        state.type = payload.type;
}=> state 값 세팅

vue에서 state 값 접근
computed: {
    type(){
        return this.$store.state.board.type;
    },
} => 또는 vuex에서 getters에 선언하고 vue에서 mapgetters를 이용하여 가져올수도 있다.