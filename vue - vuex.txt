vuex
접근 방법
vuex(store)   < -----   ~~~.vue  <-------- main.js
*.vue 파일에서 $store 객체를 참조하여 vuex에 접근한다.
main.js에서 해당 vuex 파일을 import시키며 이후 new Vue({})에 해당 vuex를 등록한다 ( 이때 등록된 객체는 $~~~  형태로 접근,vuex역시 마찬가지)
------------------------------------------------------------------------------------------------------------
Vuex 내부에 정의되는 객체
state     => component의 data 역할
getters	  => component의 computed 역할
mutations => commit으로 접근
actions	  => dispathch로 접근
------------------------------------------------------------------------------------------------------------
Vue 내부에 정의되는 객체
...mapGetter	=> getters의 값들을 접근할 때 사용, computed에 선언하여 사용
...mapState	    => state 값들을 접근할 때 사용,     computed에 선언하여 사용
...mapMutations => mutation 값들을 접근할 때 사용,  method에 선언하여 사용
...mapActions   => action 값들을 접근할 때 사용,  method에 선언하여 사용
------------------------------------------------------------------------------------------------------------
URL -> 라우터 -> VUE -> VUEX ( action : 서비스 로직 수행,axios , mutation : state값 설정 )

VUEX
	dispath 		  Commit
Vue ========> Actions ========> Mutations ========> State 
 |====================================================|
------------------------------------------------------------------------------------------------------------
module 충동 방지를 위한 namespace 정의 - vuex(store)를 정의 해주는 부분에 프로퍼티값을 추가한다.
vuex - xxx.js 
export default {
    namespaced: true,
    state: {}
    ...
 }
------------------------------------------------------------------------------------------------------------
axios 설치
npm install --save axios

axios 전역설정
imports axios from 'axios'
Vue.prototype.$http = axios

axios 사용
this.$http.get()
this.$http.post()
------------------------------------------------------------------------------------------------------------
예) $router를 이용해 push 또는 replace 처리
change.vue
this.$router.replace({path:"/board/list?type=all&page=1"});

boardList.vue
watch : {
    // 라우터 URL 변경시 해당 메소드 실행
    '$route': 'getBoardList'
} => 뷰에서 라우터 객체 접근 등은 $route 사용 !
getBoardList(){
    this.$store.dispatch('board/list',this.$route);
}, => vuex action 호출 ,$route 객체를 넘긴다.

vuex - board.js
actions: {
    list(context,router){
        const params = {};
        params.type = router.query.type;
        params.page = router.query.page;    
        Service.list(params)
        .then(res => {
            context.commit("setParams",params);        
            context.commit("lsit",res);        
        });
    }
}=> service 로직 수행후 mutation 수행
mutations: {
    list(state,res){
        state.list = res.data.list;
        state.totalCnt = res.data.total_size;
        state.unread = res.data.unread;
    },
    setParams(state,payload){
        state.page = payload.page;
        state.type = payload.type;
}=> state 값 세팅

vue에서 state 값 접근
computed: {
    type(){
        return this.$store.state.board.type; // this.$store.state.[vuex에 저장한 컴포넌트명].[state 변수명]
    },
} => 또는 vuex에서 getters에 선언하고 vue에서 mapgetters를 이용하여 가져올수도 있다.
------------------------------------------------------------------------------------------------------------
Vuex 값의 변화 감지
vuex 에서 객체({})는 변화를 해도 감지를 못함,물론 값의 변화가 적용은 된다.
따라서 state에 원시값(숫자,문자열 등)과 같은 값을 하나 선언하여 사용해야한다.
------------------------------------------------------------------------------------------------------------