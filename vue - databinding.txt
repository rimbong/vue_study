html 태그 <===> vue의 model(data) 접근시
*양방향 바인딩) v-model = "data"  

단, 한글 처리시 v-bind:value = "data" @input="updateValue" 와 같이 처리하여 사용할 것을 권고함.
또 바인드 하는 값이 어떠한 함수를 거쳐 return 되는 값을 써야하는 경우에도 v-bind:value를 이용하여야 한다.
간단하게 v-model = v-bind:value + v-on:input 라고 이해하면 된다.

------------------------------------------------------------------------------------------------------------
부모 - 자식간 (component간 데이터를 동적으로 전달)
v-bind:value = "data" or :value = "data"
이후 props 에 전달받은 값을 명시하여 사용한다.

주의) props 값을 직접 변경해서는 안된다. emit을 이용하여 부모에게 값이 변경된 값을 보내주는 형태로 작성해야한다.
------------------------------------------------------------------------------------------------------------
바인된 model 을 사용할 시
{{ data }}  ,{{  data()  }}
------------------------------------------------------------------------------------------------------------
특정 이벤트 명시 및 동작할 함수
v-on:Event="data" or  @Event = 'data(arg)'
v-on:submit="data"         => 페이지 새로고침이 일어남 (defaultprevent)
v-on:submit.prevent="data" => 페이지 새로고침이 일어나지 않음
------------------------------------------------------------------------------------------------------------
component 등록 및 사용
import 하여 component(vue file)을 사용하거나 App.vue - vue.component('사용할 컴포넌트 명',등록할 컴포넌트) 으로 전역 등록을 한다.
------------------------------------------------------------------------------------------------------------
watch
해당 model 값의 변화가 있을 때 반응한다. model의 이름과 같은 함수를 선언한다.
data(newVal , oldVal) {} 
------------------------------------------------------------------------------------------------------------
computed

1. function()을 선언하여 model의 변화에 따른 설정해야 할 함수를 지정해준다. 정의된 function은 해당 model에 대하여 종속성을 갖게 된다. 
2. 함수가아닌 Object {} 를 선언하여 사용 할 수 있는데 이때는 get,set을 선언하여 해당 값의 변화를 줄 수 있다. 이를 이용
하여 직접적으로 수정 할 수 없는 Vuex값을 제어 할 수 있는데, 
 ...mapGetters({searchValue : 'commonHeader/getSearchValue'}),
searchValueTmp : {
	get(){
	  return this.searchValue;
	},
	set(value){
	  return this.$store.commit("commonHeader/setSearchValue",value);;
    },
}
여기서 searchValue 값이 vuex에 정의된 값이다.
3. ...mapGetters 와 같이 Vuex의 데이터에 접근 할 수 있다.
4. data() 에서 선언한 변수와 공유하므로 중복이 되어선 안된다.

마지막으로 method에 비해 캐싱을 사용하므로 리소스를 줄일 수 있다.
------------------------------------------------------------------------------------------------------------
1. 중괄호 {} 사용: 객체 구문
사용 예시: :class="{ red: isRed }", :style="{ color: red, fontSize: size }"
동작 방식: 객체 구문을 사용하면, 클래스나 스타일을 키-값 쌍으로 정의할 수 있습니다. 여기서 키는 클래스명이나 스타일 속성이고, 값은 해당 속성의 활성화 여부를 결정하는 조건식입니다.

예시 설명:
  <div :class="{ red: isRed }" :style="{ color: red, fontSize: size }"></div>
  isRed가 true이면 red 클래스가 추가됩니다.
  red와 size 변수에 설정된 값이 각각 color와 fontSize 스타일로 적용됩니다.

2. 대괄호 [] 사용: 배열 구문
사용 예시: :class="[isRed ? 'red' : '', color]", :class="[{ on: alert }, color]"
동작 방식: 배열 구문을 사용하면 여러 클래스나 스타일을 배열 형태로 전달할 수 있습니다. 배열의 각 요소는 문자열 또는 객체일 수 있으며, 문자열은 직접 클래스명으로 사용되고, 객체는 조건부로 클래스명을 적용합니다.

예시 설명:
  <div :class="[isRed ? 'red' : '', color]"></div>
  isRed가 true이면 'red' 클래스가 추가됩니다. false이면 빈 문자열이 추가됩니다.
  color 변수에 설정된 값이 클래스명으로 추가됩니다.

  <div :class="[{ on: alert }, color]"></div>
  alert가 true이면 on 클래스가 추가됩니다.
  color 변수에 설정된 값이 클래스명으로 추가됩니다.

중괄호 {}와 대괄호 []의 차이점
중괄호 {}: 객체 형태로, 특정 클래스명이나 스타일 속성을 조건에 따라 동적으로 추가하거나 제거할 때 사용합니다. 키는 클래스명 또는 스타일 속성이고, 값은 조건식입니다.

대괄호 []: 배열 형태로, 여러 스타일 속성을 동적으로 적용할 때 사용합니다. 문자열은 직접 클래스명으로, 객체는 조건부로 클래스명이나 스타일 속성을 설정합니다.

정리
중괄호 {}는 개별 클래스나 스타일을 조건부로 추가/제거할 때 유용하며, 객체 형태로 특정 조건에 따라 스타일을 지정합니다.
대괄호 []는 특정 조건에 따라 클래스와 스타일을 병합할 때 유용합니다. 배열 안에 문자열이나 객체를 포함할 수 있어 유연성이 높습니다.

------------------------------------------------------------------------------------------------------------
v-if , v-show 
true or false 에 따라 해당 영역의 htlm 태그를 보이거나 보이지 않게 해준다.
v-show는 display :none의 형태이기 때문에 반복적인 렌더링에 의한 리소스를 줄여야한다면 show를 사용한다.
------------------------------------------------------------------------------------------------------------
v-for
배열의 경우
<div v-for="(data,index) in dataList"  key= ''data.uniqueId">
	{{data}}
</div>

객체의 경우
<div v-for="(value, key) in object">
  {{ key }} : {{ value }}
</div>
------------------------------------------------------------------------------------------------------------
Dom에 접근하여 컨트롤 
$ref
자바스크립트의 querySelector, getElementsByClassName, getElementById 와 같은 역할

예1)
<template>
  <div>
    <input type="text" ref="target">
  </div>
</template>
<script>
  export default {
    mounted(){
      console.log('target', this.$refs.target);
    }
  }
</script>


예2) 부모 - 자식간 컴포넌트
<!-- 부모 -->
<template>
  <Component ref="vue" />
</template>
<script>
...
  mounted() {   
    console.log(this.$refs.vue.$refs.js);
  },
</script>

<!-- 자식 -->
<template>
   <h1 ref="js">Javascript</h1>
</template>
------------------------------------------------------------------------------------------------------------
$set
새로운 값의 변이 감지

Vue의 반응성 규칙
1. 변경 감지할 데이터를 미리 초기화합니다.(객체를 생성함과 동시에 프로퍼티를 선언하는 것을 의미함)
2. 만약 객체에 새 속성을 추가할 경우 다음중 하나를 수행해야한다.

1) Vue.set 또는 this.$set을 사용하여 Vue가 감지할 수 있게 만들어준다. 

배열 : Vue.set(arr, index, value) // == this.$set(arr, index, value)
객체 : Vue.set(obj, key, value) // ==this.$set(obj,key,value)
       Vue.delete(obj, key) // == this.$delete(obj, key)


2) this.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 }) 같은 형태로 Object.assign을 사용하여 재정의 해줘야 한다.
예)
잘못된 정의
this.someObject.a = 1
this.someObject.b = 2
=> a와 b의 값에 변경이 있어도 감지하지 못함..
Object.assign(this.someObject, { a: 1, b: 2 }) 또는 this.someObject = { a:1 , b: 2 }; 형태로 넣어줘야함 ( 후자는 기존 값이 없어짐)

즉 핵심은 새로 할당하여 data에 선언한 값에 넣어준다는 것이다.

참고)
let state = {
  appInfo: {
    name: "AppName",
    version: "1.0"
  }
};

let param = {
  version: "2.0",
  author: "Developer"
};

let newObj = Object.assign({}, state.appInfo, param);
console.log(newObj);
{
  "name": "AppName",
  "version": "2.0",  // param의 값이 덮어씌워짐
  "author": "Developer"
}


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------